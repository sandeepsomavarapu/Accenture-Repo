



three layers 

UI       backend layer        db layer 


	Html,CSS,JS,TS,Angular,Node,MERN,MEAN


HTML-->static web pages  
			
			CSS3->3 ways inline,internal,external	  mystyles.css	 bootstrap.css(twitter)

	
			<h1 style="color:red;">welcome to accenture </h1>
	one.html  two.html
			<link rel="stylesheet" href="mystyles.css"/>
			<link rel="stylesheet" href="bootstrap.css"/>
			<style>
			selector{proname1:propvalue;.......}
			</style>
			
			id selector			#idname
			class selector  	.classname
			
			element selector	h1
			group selector		h1,h2....
			all selector		*
			
	   dynamic web pages
		
	#id1{color:red}
	
	#id2{background-color:"yellow"}
	
	.class1{color:red}
	
	.class2{background-color:"yellow"}


		<h1 id="id1">welcome to accenture </h1>

		<h2 id="id1">welcome to india </h2>
		
		<h3 class="class1 class2">welcome to hyderabad </h3>
		
		<h4 class="class2">welcome to mumbai </h4>


JavaScript:
===========
	<html>
<head>
<script src="myjs.js"></script>
<script src="angular.js"></script>	
	
	</script>

		</head>


external

		myjs.js

		

		variables				 var age=23;  dynamic typed programming  int a=123
		functions
		flow control		if,else,switch,for,while,dowhile.....
		events
		objects
		validations...


		function addOfTwo(var a,var b)
		{
		return a+b;
		
		}
		
		
		

TypeScript:	microsoft 2012 free source and open source
===========

		var name="sandeep";//dynamic typed programming
			name=1234;
		var result:boolean=true	
			
			
		function addOfTwo( a:number, b:number):number
		{
		return a+b;//25
		
		}
		
			addOfTwo(12,13);//valid
			
			addOfTwo("sandeep",true);//invalid
			
			
			ES6
			
			1)type safety @Compile time 
			
			2)classes,interface,inheritance,modules,....
			
			ES-->specification	 SOA				Jpa	
			
		JS 		TS				webservices		Hibernate
		
		
			
	typescript based JS frameworks		
			
				Angular,Dojo,
			
			
			var name="sandeep";//JS	dynamic typed programming
				name=1234;//valid
			var name:string="sandeep";//TS static typed programming
				name=2345;//invalid
			
			
			TS=JS+Type
			
			browser -->document 
			
			TS-->JS--->Browser 
			
			
			translator--->translation
			
			Compiler--->Compailation
			
			TSC Ts-->Js-->transpilation
			
			
			Ts--->Js...
			
nodejs 			
			
		node -->		
			
			
			
Angular :
=========
angular js
		
	angular 2,4,6,7,8,9......		
			
	SPA-->component 

routing	
forms  	event binding 
bootstrap
Json with services(HttpClient )Observable
authguards
component communication
unit testing 
	
	
	.table
	{
	
	
	
	}
	
	
	<h1 class="table"> </h1>
	
	
	webservices:
	============
	
	JSON
			
	productid producname productprice prodcutquantity
	
	
	
	Observable and Promise
	
	
	
	javascript is single threaded lang	
	
	
	
	Asynchronous
	
		Promise 	native	js
		
		Observable  not related to the angular / JS
	
	https://www.infragistics.com/community/blogs/b/infragistics/posts/angular-observable-vs-angular-promise
	
	
	    //promise
    const promise = new Promise(resolve => {
      console.log("promise call.....");
      setTimeout(() => {
        resolve('promise is working');
        resolve('promise is working1');
        resolve('promise is working2');
        resolve('promise is working3');

      }, 1000
      )
    });
    promise.then(result => console.log(result))
    //Observable
    const observable = new Observable(sub => {
      console.log("observable call...")
      setTimeout(() => {
        sub.next('Observable is working');
        sub.next('Observable is working1');
        sub.next('Observable is working2');
        sub.next('Observable is working3');
      }, 1000
      )
    });
    observable.pipe(filter(data=>data ==='Observable is working2')).subscribe(result => console.log(result))

	
	
	Promise											

Promises execute immediately on
creation. Promises are eager

Promises emit single value

Promise don't have operators

Promise can't be cancel


Observable

Observables are declarative;
computation does not start until
subscription. Its Lazy

Emits multiple values over a period of
time

Observables provides operatos like map,
filter , reduce, retry, that is useful for
complex transformation

Observables can be cancel using
unscribe method

 
	
	
